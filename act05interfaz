#include <iostream>
#include <cmath> // Para M_PI
using namespace std;

// INTERFAZ
class IFigura {
public:
    virtual double area() const = 0;
    virtual double perimetro() const = 0;
    virtual void mostrar() const = 0;
    virtual ~IFigura() {} // Destructor virtual
};

// CLASE: Triángulo (equilátero para simplicidad)
class Triangulo : public IFigura {
private:
    double base, altura;
public:
    Triangulo(double b, double h) : base(b), altura(h) {}

    double area() const override {
        return (base * altura) / 2.0;
    }

    double perimetro() const override {
        // Supongamos triángulo equilátero (todos los lados iguales)
        return 3 * base;
    }

    void mostrar() const override {
        cout << "Triángulo:" << endl;
        cout << "Base: " << base << ", Altura: " << altura << endl;
        cout << "Área: " << area() << endl;
        cout << "Perímetro: " << perimetro() << endl << endl;
    }
};

// CLASE: Círculo
class Circulo : public IFigura {
private:
    double radio;
public:
    Circulo(double r) : radio(r) {}

    double area() const override {
        return M_PI * radio * radio;
    }

    double perimetro() const override {
        return 2 * M_PI * radio;
    }

    void mostrar() const override {
        cout << "Círculo:" << endl;
        cout << "Radio: " << radio << endl;
        cout << "Área: " << area() << endl;
        cout << "Perímetro: " << perimetro() << endl << endl;
    }
};

// FUNCIÓN PRINCIPAL
int main() {
    // Crear los objetos figura
    IFigura* triangulo = new Triangulo(3.0, 4.0);
    IFigura* circulo = new Circulo(2.5);

    // Mostrar los resultados
    triangulo->mostrar();
    circulo->mostrar();

    // Liberar memoria
    delete triangulo;
    delete circulo;

    return 0;
}
